/* automatically generated by rust-bindgen */
/*  $ bindgen --builtins --convert-macros /usr/include/resolv.h */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __llvm__: ::std::os::raw::c_uchar = 1;
pub const __clang__: ::std::os::raw::c_uchar = 1;
pub const __clang_major__: ::std::os::raw::c_uchar = 3;
pub const __clang_minor__: ::std::os::raw::c_uchar = 8;
pub const __clang_patchlevel__: ::std::os::raw::c_uchar = 1;
pub const __GNUC_MINOR__: ::std::os::raw::c_uchar = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uchar = 1;
pub const __GNUC__: ::std::os::raw::c_uchar = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_ushort = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uchar = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uchar = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uchar = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uchar = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uchar = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uchar = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uchar = 1;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uchar = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uchar = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_ushort = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_ushort = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_ushort = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uchar = 1;
pub const _LP64: ::std::os::raw::c_uchar = 1;
pub const __LP64__: ::std::os::raw::c_uchar = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uchar = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uchar = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_char = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_char = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_char = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uchar = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uchar = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uchar = 16;
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __SIZE_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uchar = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uchar = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uchar = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uchar = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uchar = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_char = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_char = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uchar = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uchar = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_ushort = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_short = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_short = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uchar = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uchar = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_ushort = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_short = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_short = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uchar = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uchar = 1;
pub const __UINT8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_FAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uchar = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uchar = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __amd64__: ::std::os::raw::c_uchar = 1;
pub const __amd64: ::std::os::raw::c_uchar = 1;
pub const __x86_64: ::std::os::raw::c_uchar = 1;
pub const __x86_64__: ::std::os::raw::c_uchar = 1;
pub const __k8: ::std::os::raw::c_uchar = 1;
pub const __k8__: ::std::os::raw::c_uchar = 1;
pub const __tune_k8__: ::std::os::raw::c_uchar = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uchar = 1;
pub const __FXSR__: ::std::os::raw::c_uchar = 1;
pub const __SSE2__: ::std::os::raw::c_uchar = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uchar = 1;
pub const __SSE__: ::std::os::raw::c_uchar = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uchar = 1;
pub const __MMX__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uchar = 1;
pub const unix: ::std::os::raw::c_uchar = 1;
pub const __unix: ::std::os::raw::c_uchar = 1;
pub const __unix__: ::std::os::raw::c_uchar = 1;
pub const linux: ::std::os::raw::c_uchar = 1;
pub const __linux: ::std::os::raw::c_uchar = 1;
pub const __linux__: ::std::os::raw::c_uchar = 1;
pub const __gnu_linux__: ::std::os::raw::c_uchar = 1;
pub const __ELF__: ::std::os::raw::c_uchar = 1;
pub const __STDC__: ::std::os::raw::c_uchar = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uchar = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uchar = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uchar = 1;
pub const _SYS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const _FEATURES_H: ::std::os::raw::c_uchar = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uchar = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uchar = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_MISC: ::std::os::raw::c_uchar = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uchar = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uchar = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uchar = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uchar = 6;
pub const __GLIBC__: ::std::os::raw::c_uchar = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uchar = 23;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uchar = 1;
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uchar = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uchar = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uchar = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uchar = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const __clock_t_defined: ::std::os::raw::c_uchar = 1;
pub const __time_t_defined: ::std::os::raw::c_uchar = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uchar = 1;
pub const __timer_t_defined: ::std::os::raw::c_uchar = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uchar = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uchar = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_ushort = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_ushort = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_ushort = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_ushort = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_ushort = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_ushort = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_ushort = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_ushort = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uchar = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uchar = 1;
pub const _SIGSET_H_types: ::std::os::raw::c_uchar = 1;
pub const __timespec_defined: ::std::os::raw::c_uchar = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uchar = 1;
pub const FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uchar = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uchar = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uchar = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uchar = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uchar = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uchar = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uchar = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uchar = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uchar = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: ::std::os::raw::c_uchar = 1;
pub const _NETINET_IN_H: ::std::os::raw::c_uchar = 1;
pub const _STDINT_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uchar = 1;
pub const __WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MIN: ::std::os::raw::c_char = -128;
pub const INT16_MIN: ::std::os::raw::c_short = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_short = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_char = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_char = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_char = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_char = -1;
pub const WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WINT_MIN: ::std::os::raw::c_uchar = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const _SYS_SOCKET_H: ::std::os::raw::c_uchar = 1;
pub const _SYS_UIO_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_UIO_H: ::std::os::raw::c_uchar = 1;
pub const UIO_MAXIOV: ::std::os::raw::c_ushort = 1024;
pub const PF_UNSPEC: ::std::os::raw::c_uchar = 0;
pub const PF_LOCAL: ::std::os::raw::c_uchar = 1;
pub const PF_UNIX: ::std::os::raw::c_uchar = 1;
pub const PF_FILE: ::std::os::raw::c_uchar = 1;
pub const PF_INET: ::std::os::raw::c_uchar = 2;
pub const PF_AX25: ::std::os::raw::c_uchar = 3;
pub const PF_IPX: ::std::os::raw::c_uchar = 4;
pub const PF_APPLETALK: ::std::os::raw::c_uchar = 5;
pub const PF_NETROM: ::std::os::raw::c_uchar = 6;
pub const PF_BRIDGE: ::std::os::raw::c_uchar = 7;
pub const PF_ATMPVC: ::std::os::raw::c_uchar = 8;
pub const PF_X25: ::std::os::raw::c_uchar = 9;
pub const PF_INET6: ::std::os::raw::c_uchar = 10;
pub const PF_ROSE: ::std::os::raw::c_uchar = 11;
pub const PF_DECnet: ::std::os::raw::c_uchar = 12;
pub const PF_NETBEUI: ::std::os::raw::c_uchar = 13;
pub const PF_SECURITY: ::std::os::raw::c_uchar = 14;
pub const PF_KEY: ::std::os::raw::c_uchar = 15;
pub const PF_NETLINK: ::std::os::raw::c_uchar = 16;
pub const PF_ROUTE: ::std::os::raw::c_uchar = 16;
pub const PF_PACKET: ::std::os::raw::c_uchar = 17;
pub const PF_ASH: ::std::os::raw::c_uchar = 18;
pub const PF_ECONET: ::std::os::raw::c_uchar = 19;
pub const PF_ATMSVC: ::std::os::raw::c_uchar = 20;
pub const PF_RDS: ::std::os::raw::c_uchar = 21;
pub const PF_SNA: ::std::os::raw::c_uchar = 22;
pub const PF_IRDA: ::std::os::raw::c_uchar = 23;
pub const PF_PPPOX: ::std::os::raw::c_uchar = 24;
pub const PF_WANPIPE: ::std::os::raw::c_uchar = 25;
pub const PF_LLC: ::std::os::raw::c_uchar = 26;
pub const PF_IB: ::std::os::raw::c_uchar = 27;
pub const PF_MPLS: ::std::os::raw::c_uchar = 28;
pub const PF_CAN: ::std::os::raw::c_uchar = 29;
pub const PF_TIPC: ::std::os::raw::c_uchar = 30;
pub const PF_BLUETOOTH: ::std::os::raw::c_uchar = 31;
pub const PF_IUCV: ::std::os::raw::c_uchar = 32;
pub const PF_RXRPC: ::std::os::raw::c_uchar = 33;
pub const PF_ISDN: ::std::os::raw::c_uchar = 34;
pub const PF_PHONET: ::std::os::raw::c_uchar = 35;
pub const PF_IEEE802154: ::std::os::raw::c_uchar = 36;
pub const PF_CAIF: ::std::os::raw::c_uchar = 37;
pub const PF_ALG: ::std::os::raw::c_uchar = 38;
pub const PF_NFC: ::std::os::raw::c_uchar = 39;
pub const PF_VSOCK: ::std::os::raw::c_uchar = 40;
pub const PF_MAX: ::std::os::raw::c_uchar = 41;
pub const AF_UNSPEC: ::std::os::raw::c_uchar = 0;
pub const AF_LOCAL: ::std::os::raw::c_uchar = 1;
pub const AF_UNIX: ::std::os::raw::c_uchar = 1;
pub const AF_FILE: ::std::os::raw::c_uchar = 1;
pub const AF_INET: ::std::os::raw::c_uchar = 2;
pub const AF_AX25: ::std::os::raw::c_uchar = 3;
pub const AF_IPX: ::std::os::raw::c_uchar = 4;
pub const AF_APPLETALK: ::std::os::raw::c_uchar = 5;
pub const AF_NETROM: ::std::os::raw::c_uchar = 6;
pub const AF_BRIDGE: ::std::os::raw::c_uchar = 7;
pub const AF_ATMPVC: ::std::os::raw::c_uchar = 8;
pub const AF_X25: ::std::os::raw::c_uchar = 9;
pub const AF_INET6: ::std::os::raw::c_uchar = 10;
pub const AF_ROSE: ::std::os::raw::c_uchar = 11;
pub const AF_DECnet: ::std::os::raw::c_uchar = 12;
pub const AF_NETBEUI: ::std::os::raw::c_uchar = 13;
pub const AF_SECURITY: ::std::os::raw::c_uchar = 14;
pub const AF_KEY: ::std::os::raw::c_uchar = 15;
pub const AF_NETLINK: ::std::os::raw::c_uchar = 16;
pub const AF_ROUTE: ::std::os::raw::c_uchar = 16;
pub const AF_PACKET: ::std::os::raw::c_uchar = 17;
pub const AF_ASH: ::std::os::raw::c_uchar = 18;
pub const AF_ECONET: ::std::os::raw::c_uchar = 19;
pub const AF_ATMSVC: ::std::os::raw::c_uchar = 20;
pub const AF_RDS: ::std::os::raw::c_uchar = 21;
pub const AF_SNA: ::std::os::raw::c_uchar = 22;
pub const AF_IRDA: ::std::os::raw::c_uchar = 23;
pub const AF_PPPOX: ::std::os::raw::c_uchar = 24;
pub const AF_WANPIPE: ::std::os::raw::c_uchar = 25;
pub const AF_LLC: ::std::os::raw::c_uchar = 26;
pub const AF_IB: ::std::os::raw::c_uchar = 27;
pub const AF_MPLS: ::std::os::raw::c_uchar = 28;
pub const AF_CAN: ::std::os::raw::c_uchar = 29;
pub const AF_TIPC: ::std::os::raw::c_uchar = 30;
pub const AF_BLUETOOTH: ::std::os::raw::c_uchar = 31;
pub const AF_IUCV: ::std::os::raw::c_uchar = 32;
pub const AF_RXRPC: ::std::os::raw::c_uchar = 33;
pub const AF_ISDN: ::std::os::raw::c_uchar = 34;
pub const AF_PHONET: ::std::os::raw::c_uchar = 35;
pub const AF_IEEE802154: ::std::os::raw::c_uchar = 36;
pub const AF_CAIF: ::std::os::raw::c_uchar = 37;
pub const AF_ALG: ::std::os::raw::c_uchar = 38;
pub const AF_NFC: ::std::os::raw::c_uchar = 39;
pub const AF_VSOCK: ::std::os::raw::c_uchar = 40;
pub const AF_MAX: ::std::os::raw::c_uchar = 41;
pub const SOL_RAW: ::std::os::raw::c_uchar = 255;
pub const SOL_DECNET: ::std::os::raw::c_ushort = 261;
pub const SOL_X25: ::std::os::raw::c_ushort = 262;
pub const SOL_PACKET: ::std::os::raw::c_ushort = 263;
pub const SOL_ATM: ::std::os::raw::c_ushort = 264;
pub const SOL_AAL: ::std::os::raw::c_ushort = 265;
pub const SOL_IRDA: ::std::os::raw::c_ushort = 266;
pub const SOMAXCONN: ::std::os::raw::c_uchar = 128;
pub const _BITS_SOCKADDR_H: ::std::os::raw::c_uchar = 1;
pub const _SS_SIZE: ::std::os::raw::c_uchar = 128;
pub const FIOSETOWN: ::std::os::raw::c_ushort = 35073;
pub const SIOCSPGRP: ::std::os::raw::c_ushort = 35074;
pub const FIOGETOWN: ::std::os::raw::c_ushort = 35075;
pub const SIOCGPGRP: ::std::os::raw::c_ushort = 35076;
pub const SIOCATMARK: ::std::os::raw::c_ushort = 35077;
pub const SIOCGSTAMP: ::std::os::raw::c_ushort = 35078;
pub const SIOCGSTAMPNS: ::std::os::raw::c_ushort = 35079;
pub const SOL_SOCKET: ::std::os::raw::c_uchar = 1;
pub const SO_DEBUG: ::std::os::raw::c_uchar = 1;
pub const SO_REUSEADDR: ::std::os::raw::c_uchar = 2;
pub const SO_TYPE: ::std::os::raw::c_uchar = 3;
pub const SO_ERROR: ::std::os::raw::c_uchar = 4;
pub const SO_DONTROUTE: ::std::os::raw::c_uchar = 5;
pub const SO_BROADCAST: ::std::os::raw::c_uchar = 6;
pub const SO_SNDBUF: ::std::os::raw::c_uchar = 7;
pub const SO_RCVBUF: ::std::os::raw::c_uchar = 8;
pub const SO_SNDBUFFORCE: ::std::os::raw::c_uchar = 32;
pub const SO_RCVBUFFORCE: ::std::os::raw::c_uchar = 33;
pub const SO_KEEPALIVE: ::std::os::raw::c_uchar = 9;
pub const SO_OOBINLINE: ::std::os::raw::c_uchar = 10;
pub const SO_NO_CHECK: ::std::os::raw::c_uchar = 11;
pub const SO_PRIORITY: ::std::os::raw::c_uchar = 12;
pub const SO_LINGER: ::std::os::raw::c_uchar = 13;
pub const SO_BSDCOMPAT: ::std::os::raw::c_uchar = 14;
pub const SO_REUSEPORT: ::std::os::raw::c_uchar = 15;
pub const SO_PASSCRED: ::std::os::raw::c_uchar = 16;
pub const SO_PEERCRED: ::std::os::raw::c_uchar = 17;
pub const SO_RCVLOWAT: ::std::os::raw::c_uchar = 18;
pub const SO_SNDLOWAT: ::std::os::raw::c_uchar = 19;
pub const SO_RCVTIMEO: ::std::os::raw::c_uchar = 20;
pub const SO_SNDTIMEO: ::std::os::raw::c_uchar = 21;
pub const SO_SECURITY_AUTHENTICATION: ::std::os::raw::c_uchar = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: ::std::os::raw::c_uchar = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: ::std::os::raw::c_uchar = 24;
pub const SO_BINDTODEVICE: ::std::os::raw::c_uchar = 25;
pub const SO_ATTACH_FILTER: ::std::os::raw::c_uchar = 26;
pub const SO_DETACH_FILTER: ::std::os::raw::c_uchar = 27;
pub const SO_GET_FILTER: ::std::os::raw::c_uchar = 26;
pub const SO_PEERNAME: ::std::os::raw::c_uchar = 28;
pub const SO_TIMESTAMP: ::std::os::raw::c_uchar = 29;
pub const SCM_TIMESTAMP: ::std::os::raw::c_uchar = 29;
pub const SO_ACCEPTCONN: ::std::os::raw::c_uchar = 30;
pub const SO_PEERSEC: ::std::os::raw::c_uchar = 31;
pub const SO_PASSSEC: ::std::os::raw::c_uchar = 34;
pub const SO_TIMESTAMPNS: ::std::os::raw::c_uchar = 35;
pub const SCM_TIMESTAMPNS: ::std::os::raw::c_uchar = 35;
pub const SO_MARK: ::std::os::raw::c_uchar = 36;
pub const SO_TIMESTAMPING: ::std::os::raw::c_uchar = 37;
pub const SCM_TIMESTAMPING: ::std::os::raw::c_uchar = 37;
pub const SO_PROTOCOL: ::std::os::raw::c_uchar = 38;
pub const SO_DOMAIN: ::std::os::raw::c_uchar = 39;
pub const SO_RXQ_OVFL: ::std::os::raw::c_uchar = 40;
pub const SO_WIFI_STATUS: ::std::os::raw::c_uchar = 41;
pub const SCM_WIFI_STATUS: ::std::os::raw::c_uchar = 41;
pub const SO_PEEK_OFF: ::std::os::raw::c_uchar = 42;
pub const SO_NOFCS: ::std::os::raw::c_uchar = 43;
pub const SO_LOCK_FILTER: ::std::os::raw::c_uchar = 44;
pub const SO_SELECT_ERR_QUEUE: ::std::os::raw::c_uchar = 45;
pub const SO_BUSY_POLL: ::std::os::raw::c_uchar = 46;
pub const SO_MAX_PACING_RATE: ::std::os::raw::c_uchar = 47;
pub const SO_BPF_EXTENSIONS: ::std::os::raw::c_uchar = 48;
pub const SO_INCOMING_CPU: ::std::os::raw::c_uchar = 49;
pub const SO_ATTACH_BPF: ::std::os::raw::c_uchar = 50;
pub const SO_DETACH_BPF: ::std::os::raw::c_uchar = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: ::std::os::raw::c_uchar = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: ::std::os::raw::c_uchar = 52;
pub const SO_CNX_ADVICE: ::std::os::raw::c_uchar = 53;
pub const IP_OPTIONS: ::std::os::raw::c_uchar = 4;
pub const IP_HDRINCL: ::std::os::raw::c_uchar = 3;
pub const IP_TOS: ::std::os::raw::c_uchar = 1;
pub const IP_TTL: ::std::os::raw::c_uchar = 2;
pub const IP_RECVOPTS: ::std::os::raw::c_uchar = 6;
pub const IP_RETOPTS: ::std::os::raw::c_uchar = 7;
pub const IP_MULTICAST_IF: ::std::os::raw::c_uchar = 32;
pub const IP_MULTICAST_TTL: ::std::os::raw::c_uchar = 33;
pub const IP_MULTICAST_LOOP: ::std::os::raw::c_uchar = 34;
pub const IP_ADD_MEMBERSHIP: ::std::os::raw::c_uchar = 35;
pub const IP_DROP_MEMBERSHIP: ::std::os::raw::c_uchar = 36;
pub const IP_UNBLOCK_SOURCE: ::std::os::raw::c_uchar = 37;
pub const IP_BLOCK_SOURCE: ::std::os::raw::c_uchar = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: ::std::os::raw::c_uchar = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: ::std::os::raw::c_uchar = 40;
pub const IP_MSFILTER: ::std::os::raw::c_uchar = 41;
pub const MCAST_JOIN_GROUP: ::std::os::raw::c_uchar = 42;
pub const MCAST_BLOCK_SOURCE: ::std::os::raw::c_uchar = 43;
pub const MCAST_UNBLOCK_SOURCE: ::std::os::raw::c_uchar = 44;
pub const MCAST_LEAVE_GROUP: ::std::os::raw::c_uchar = 45;
pub const MCAST_JOIN_SOURCE_GROUP: ::std::os::raw::c_uchar = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: ::std::os::raw::c_uchar = 47;
pub const MCAST_MSFILTER: ::std::os::raw::c_uchar = 48;
pub const IP_MULTICAST_ALL: ::std::os::raw::c_uchar = 49;
pub const IP_UNICAST_IF: ::std::os::raw::c_uchar = 50;
pub const MCAST_EXCLUDE: ::std::os::raw::c_uchar = 0;
pub const MCAST_INCLUDE: ::std::os::raw::c_uchar = 1;
pub const IP_ROUTER_ALERT: ::std::os::raw::c_uchar = 5;
pub const IP_PKTINFO: ::std::os::raw::c_uchar = 8;
pub const IP_PKTOPTIONS: ::std::os::raw::c_uchar = 9;
pub const IP_PMTUDISC: ::std::os::raw::c_uchar = 10;
pub const IP_MTU_DISCOVER: ::std::os::raw::c_uchar = 10;
pub const IP_RECVERR: ::std::os::raw::c_uchar = 11;
pub const IP_RECVTTL: ::std::os::raw::c_uchar = 12;
pub const IP_RECVTOS: ::std::os::raw::c_uchar = 13;
pub const IP_MTU: ::std::os::raw::c_uchar = 14;
pub const IP_FREEBIND: ::std::os::raw::c_uchar = 15;
pub const IP_IPSEC_POLICY: ::std::os::raw::c_uchar = 16;
pub const IP_XFRM_POLICY: ::std::os::raw::c_uchar = 17;
pub const IP_PASSSEC: ::std::os::raw::c_uchar = 18;
pub const IP_TRANSPARENT: ::std::os::raw::c_uchar = 19;
pub const IP_ORIGDSTADDR: ::std::os::raw::c_uchar = 20;
pub const IP_RECVORIGDSTADDR: ::std::os::raw::c_uchar = 20;
pub const IP_MINTTL: ::std::os::raw::c_uchar = 21;
pub const IP_NODEFRAG: ::std::os::raw::c_uchar = 22;
pub const IP_CHECKSUM: ::std::os::raw::c_uchar = 23;
pub const IP_BIND_ADDRESS_NO_PORT: ::std::os::raw::c_uchar = 24;
pub const IP_PMTUDISC_DONT: ::std::os::raw::c_uchar = 0;
pub const IP_PMTUDISC_WANT: ::std::os::raw::c_uchar = 1;
pub const IP_PMTUDISC_DO: ::std::os::raw::c_uchar = 2;
pub const IP_PMTUDISC_PROBE: ::std::os::raw::c_uchar = 3;
pub const IP_PMTUDISC_INTERFACE: ::std::os::raw::c_uchar = 4;
pub const IP_PMTUDISC_OMIT: ::std::os::raw::c_uchar = 5;
pub const SOL_IP: ::std::os::raw::c_uchar = 0;
pub const IP_DEFAULT_MULTICAST_TTL: ::std::os::raw::c_uchar = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: ::std::os::raw::c_uchar = 1;
pub const IP_MAX_MEMBERSHIPS: ::std::os::raw::c_uchar = 20;
pub const IPV6_ADDRFORM: ::std::os::raw::c_uchar = 1;
pub const IPV6_2292PKTINFO: ::std::os::raw::c_uchar = 2;
pub const IPV6_2292HOPOPTS: ::std::os::raw::c_uchar = 3;
pub const IPV6_2292DSTOPTS: ::std::os::raw::c_uchar = 4;
pub const IPV6_2292RTHDR: ::std::os::raw::c_uchar = 5;
pub const IPV6_2292PKTOPTIONS: ::std::os::raw::c_uchar = 6;
pub const IPV6_CHECKSUM: ::std::os::raw::c_uchar = 7;
pub const IPV6_2292HOPLIMIT: ::std::os::raw::c_uchar = 8;
pub const IPV6_NEXTHOP: ::std::os::raw::c_uchar = 9;
pub const IPV6_AUTHHDR: ::std::os::raw::c_uchar = 10;
pub const IPV6_UNICAST_HOPS: ::std::os::raw::c_uchar = 16;
pub const IPV6_MULTICAST_IF: ::std::os::raw::c_uchar = 17;
pub const IPV6_MULTICAST_HOPS: ::std::os::raw::c_uchar = 18;
pub const IPV6_MULTICAST_LOOP: ::std::os::raw::c_uchar = 19;
pub const IPV6_JOIN_GROUP: ::std::os::raw::c_uchar = 20;
pub const IPV6_LEAVE_GROUP: ::std::os::raw::c_uchar = 21;
pub const IPV6_ROUTER_ALERT: ::std::os::raw::c_uchar = 22;
pub const IPV6_MTU_DISCOVER: ::std::os::raw::c_uchar = 23;
pub const IPV6_MTU: ::std::os::raw::c_uchar = 24;
pub const IPV6_RECVERR: ::std::os::raw::c_uchar = 25;
pub const IPV6_V6ONLY: ::std::os::raw::c_uchar = 26;
pub const IPV6_JOIN_ANYCAST: ::std::os::raw::c_uchar = 27;
pub const IPV6_LEAVE_ANYCAST: ::std::os::raw::c_uchar = 28;
pub const IPV6_IPSEC_POLICY: ::std::os::raw::c_uchar = 34;
pub const IPV6_XFRM_POLICY: ::std::os::raw::c_uchar = 35;
pub const IPV6_RECVPKTINFO: ::std::os::raw::c_uchar = 49;
pub const IPV6_PKTINFO: ::std::os::raw::c_uchar = 50;
pub const IPV6_RECVHOPLIMIT: ::std::os::raw::c_uchar = 51;
pub const IPV6_HOPLIMIT: ::std::os::raw::c_uchar = 52;
pub const IPV6_RECVHOPOPTS: ::std::os::raw::c_uchar = 53;
pub const IPV6_HOPOPTS: ::std::os::raw::c_uchar = 54;
pub const IPV6_RTHDRDSTOPTS: ::std::os::raw::c_uchar = 55;
pub const IPV6_RECVRTHDR: ::std::os::raw::c_uchar = 56;
pub const IPV6_RTHDR: ::std::os::raw::c_uchar = 57;
pub const IPV6_RECVDSTOPTS: ::std::os::raw::c_uchar = 58;
pub const IPV6_DSTOPTS: ::std::os::raw::c_uchar = 59;
pub const IPV6_RECVPATHMTU: ::std::os::raw::c_uchar = 60;
pub const IPV6_PATHMTU: ::std::os::raw::c_uchar = 61;
pub const IPV6_DONTFRAG: ::std::os::raw::c_uchar = 62;
pub const IPV6_RECVTCLASS: ::std::os::raw::c_uchar = 66;
pub const IPV6_TCLASS: ::std::os::raw::c_uchar = 67;
pub const IPV6_ADD_MEMBERSHIP: ::std::os::raw::c_uchar = 20;
pub const IPV6_DROP_MEMBERSHIP: ::std::os::raw::c_uchar = 21;
pub const IPV6_RXHOPOPTS: ::std::os::raw::c_uchar = 54;
pub const IPV6_RXDSTOPTS: ::std::os::raw::c_uchar = 59;
pub const IPV6_PMTUDISC_DONT: ::std::os::raw::c_uchar = 0;
pub const IPV6_PMTUDISC_WANT: ::std::os::raw::c_uchar = 1;
pub const IPV6_PMTUDISC_DO: ::std::os::raw::c_uchar = 2;
pub const IPV6_PMTUDISC_PROBE: ::std::os::raw::c_uchar = 3;
pub const IPV6_PMTUDISC_INTERFACE: ::std::os::raw::c_uchar = 4;
pub const IPV6_PMTUDISC_OMIT: ::std::os::raw::c_uchar = 5;
pub const SOL_IPV6: ::std::os::raw::c_uchar = 41;
pub const SOL_ICMPV6: ::std::os::raw::c_uchar = 58;
pub const IPV6_RTHDR_LOOSE: ::std::os::raw::c_uchar = 0;
pub const IPV6_RTHDR_STRICT: ::std::os::raw::c_uchar = 1;
pub const IPV6_RTHDR_TYPE_0: ::std::os::raw::c_uchar = 0;
pub const IN_CLASSA_NET: ::std::os::raw::c_uint = 4278190080;
pub const IN_CLASSA_NSHIFT: ::std::os::raw::c_uchar = 24;
pub const IN_CLASSA_HOST: ::std::os::raw::c_uint = 16777215;
pub const IN_CLASSA_MAX: ::std::os::raw::c_uchar = 128;
pub const IN_CLASSB_NET: ::std::os::raw::c_uint = 4294901760;
pub const IN_CLASSB_NSHIFT: ::std::os::raw::c_uchar = 16;
pub const IN_CLASSB_HOST: ::std::os::raw::c_ushort = 65535;
pub const IN_CLASSB_MAX: ::std::os::raw::c_uint = 65536;
pub const IN_CLASSC_NET: ::std::os::raw::c_uint = 4294967040;
pub const IN_CLASSC_NSHIFT: ::std::os::raw::c_uchar = 8;
pub const IN_CLASSC_HOST: ::std::os::raw::c_uchar = 255;
pub const IN_LOOPBACKNET: ::std::os::raw::c_uchar = 127;
pub const INET_ADDRSTRLEN: ::std::os::raw::c_uchar = 16;
pub const INET6_ADDRSTRLEN: ::std::os::raw::c_uchar = 46;
pub const _SYS_PARAM_H: ::std::os::raw::c_uchar = 1;
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uchar = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uchar = 16;
pub const SCHAR_MAX: ::std::os::raw::c_uchar = 127;
pub const SHRT_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SCHAR_MIN: ::std::os::raw::c_char = -128;
pub const SHRT_MIN: ::std::os::raw::c_short = -32768;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UCHAR_MAX: ::std::os::raw::c_uchar = 255;
pub const USHRT_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const ULONG_MAX: ::std::os::raw::c_char = -1;
pub const CHAR_BIT: ::std::os::raw::c_uchar = 8;
pub const CHAR_MIN: ::std::os::raw::c_char = -128;
pub const CHAR_MAX: ::std::os::raw::c_uchar = 127;
pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ULLONG_MAX: ::std::os::raw::c_char = -1;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uchar = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uchar = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_ushort = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uchar = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uchar = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uchar = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uchar = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uchar = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_ushort = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_ushort = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_ushort = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_ushort = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_ushort = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uchar = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uchar = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_ushort = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uchar = 127;
pub const MAX_CANON: ::std::os::raw::c_uchar = 255;
pub const MAX_INPUT: ::std::os::raw::c_uchar = 255;
pub const NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const PATH_MAX: ::std::os::raw::c_ushort = 4096;
pub const PIPE_BUF: ::std::os::raw::c_ushort = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uchar = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_ushort = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uchar = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uchar = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uchar = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uchar = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_ushort = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uchar = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_ushort = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uchar = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_ushort = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SSIZE_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uchar = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uchar = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_ushort = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uchar = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_ushort = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_ushort = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uchar = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_ushort = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uchar = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_ushort = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uchar = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uchar = 32;
pub const LINE_MAX: ::std::os::raw::c_ushort = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_ushort = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_ushort = 32767;
pub const _SIGSET_H_fns: ::std::os::raw::c_uchar = 1;
pub const SIGHUP: ::std::os::raw::c_uchar = 1;
pub const SIGINT: ::std::os::raw::c_uchar = 2;
pub const SIGQUIT: ::std::os::raw::c_uchar = 3;
pub const SIGILL: ::std::os::raw::c_uchar = 4;
pub const SIGTRAP: ::std::os::raw::c_uchar = 5;
pub const SIGABRT: ::std::os::raw::c_uchar = 6;
pub const SIGIOT: ::std::os::raw::c_uchar = 6;
pub const SIGBUS: ::std::os::raw::c_uchar = 7;
pub const SIGFPE: ::std::os::raw::c_uchar = 8;
pub const SIGKILL: ::std::os::raw::c_uchar = 9;
pub const SIGUSR1: ::std::os::raw::c_uchar = 10;
pub const SIGSEGV: ::std::os::raw::c_uchar = 11;
pub const SIGUSR2: ::std::os::raw::c_uchar = 12;
pub const SIGPIPE: ::std::os::raw::c_uchar = 13;
pub const SIGALRM: ::std::os::raw::c_uchar = 14;
pub const SIGTERM: ::std::os::raw::c_uchar = 15;
pub const SIGSTKFLT: ::std::os::raw::c_uchar = 16;
pub const SIGCHLD: ::std::os::raw::c_uchar = 17;
pub const SIGCONT: ::std::os::raw::c_uchar = 18;
pub const SIGSTOP: ::std::os::raw::c_uchar = 19;
pub const SIGTSTP: ::std::os::raw::c_uchar = 20;
pub const SIGTTIN: ::std::os::raw::c_uchar = 21;
pub const SIGTTOU: ::std::os::raw::c_uchar = 22;
pub const SIGURG: ::std::os::raw::c_uchar = 23;
pub const SIGXCPU: ::std::os::raw::c_uchar = 24;
pub const SIGXFSZ: ::std::os::raw::c_uchar = 25;
pub const SIGVTALRM: ::std::os::raw::c_uchar = 26;
pub const SIGPROF: ::std::os::raw::c_uchar = 27;
pub const SIGWINCH: ::std::os::raw::c_uchar = 28;
pub const SIGIO: ::std::os::raw::c_uchar = 29;
pub const SIGPWR: ::std::os::raw::c_uchar = 30;
pub const SIGSYS: ::std::os::raw::c_uchar = 31;
pub const SIGUNUSED: ::std::os::raw::c_uchar = 31;
pub const _NSIG: ::std::os::raw::c_uchar = 65;
pub const __SIGRTMIN: ::std::os::raw::c_uchar = 32;
pub const __SIGRTMAX: ::std::os::raw::c_uchar = 64;
pub const __have_sigval_t: ::std::os::raw::c_uchar = 1;
pub const __have_siginfo_t: ::std::os::raw::c_uchar = 1;
pub const __SI_MAX_SIZE: ::std::os::raw::c_uchar = 128;
pub const __have_sigevent_t: ::std::os::raw::c_uchar = 1;
pub const __SIGEV_MAX_SIZE: ::std::os::raw::c_uchar = 64;
pub const NSIG: ::std::os::raw::c_uchar = 65;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uchar = 1;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uchar = 2;
pub const SA_SIGINFO: ::std::os::raw::c_uchar = 4;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 134217728;
pub const SA_RESTART: ::std::os::raw::c_uint = 268435456;
pub const SA_NODEFER: ::std::os::raw::c_uint = 1073741824;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 2147483648;
pub const SA_INTERRUPT: ::std::os::raw::c_uint = 536870912;
pub const SA_NOMASK: ::std::os::raw::c_uint = 1073741824;
pub const SA_ONESHOT: ::std::os::raw::c_uint = 2147483648;
pub const SA_STACK: ::std::os::raw::c_uint = 134217728;
pub const SIG_BLOCK: ::std::os::raw::c_uchar = 0;
pub const SIG_UNBLOCK: ::std::os::raw::c_uchar = 1;
pub const SIG_SETMASK: ::std::os::raw::c_uchar = 2;
pub const _BITS_SIGCONTEXT_H: ::std::os::raw::c_uchar = 1;
pub const FP_XSTATE_MAGIC1: ::std::os::raw::c_uint = 1179670611;
pub const FP_XSTATE_MAGIC2: ::std::os::raw::c_uint = 1179670597;
pub const MINSIGSTKSZ: ::std::os::raw::c_ushort = 2048;
pub const SIGSTKSZ: ::std::os::raw::c_ushort = 8192;
pub const _SYS_UCONTEXT_H: ::std::os::raw::c_uchar = 1;
pub const NGREG: ::std::os::raw::c_uchar = 23;
pub const _BITS_SIGTHREAD_H: ::std::os::raw::c_uchar = 1;
pub const HZ: ::std::os::raw::c_uchar = 100;
pub const EXEC_PAGESIZE: ::std::os::raw::c_ushort = 4096;
pub const NOGROUP: ::std::os::raw::c_char = -1;
pub const MAXHOSTNAMELEN: ::std::os::raw::c_uchar = 64;
pub const MAXSYMLINKS: ::std::os::raw::c_uchar = 20;
pub const NOFILE: ::std::os::raw::c_ushort = 256;
pub const NCARGS: ::std::os::raw::c_uint = 131072;
pub const NBBY: ::std::os::raw::c_uchar = 8;
pub const NGROUPS: ::std::os::raw::c_uint = 65536;
pub const CANBSIZ: ::std::os::raw::c_uchar = 255;
pub const MAXPATHLEN: ::std::os::raw::c_ushort = 4096;
pub const DEV_BSIZE: ::std::os::raw::c_ushort = 512;
pub const _STDIO_H: ::std::os::raw::c_uchar = 1;
pub const __FILE_defined: ::std::os::raw::c_uchar = 1;
pub const ____FILE_defined: ::std::os::raw::c_uchar = 1;
pub const _G_config_h: ::std::os::raw::c_uchar = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uchar = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uchar = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uchar = 1;
pub const EOF: ::std::os::raw::c_char = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uchar = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uchar = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uchar = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uchar = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uchar = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uchar = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uchar = 64;
pub const _IOS_BIN: ::std::os::raw::c_uchar = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uchar = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uchar = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uchar = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uchar = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uchar = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uchar = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uchar = 64;
pub const _IO_LINKED: ::std::os::raw::c_uchar = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_ushort = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_ushort = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_ushort = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_ushort = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_ushort = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_ushort = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_ushort = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uchar = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uchar = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uchar = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uchar = 1;
pub const _IO_LEFT: ::std::os::raw::c_uchar = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uchar = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uchar = 8;
pub const _IO_DEC: ::std::os::raw::c_uchar = 16;
pub const _IO_OCT: ::std::os::raw::c_uchar = 32;
pub const _IO_HEX: ::std::os::raw::c_uchar = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uchar = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_ushort = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_ushort = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_ushort = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_ushort = 2048;
pub const _IO_FIXED: ::std::os::raw::c_ushort = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_STDIO: ::std::os::raw::c_ushort = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_ushort = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uchar = 0;
pub const _IOLBF: ::std::os::raw::c_uchar = 1;
pub const _IONBF: ::std::os::raw::c_uchar = 2;
pub const BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const SEEK_SET: ::std::os::raw::c_uchar = 0;
pub const SEEK_CUR: ::std::os::raw::c_uchar = 1;
pub const SEEK_END: ::std::os::raw::c_uchar = 2;
pub const L_tmpnam: ::std::os::raw::c_uchar = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_ushort = 4096;
pub const L_ctermid: ::std::os::raw::c_uchar = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uchar = 16;
pub const __NAMESER: ::std::os::raw::c_uint = 19991006;
pub const NS_PACKETSZ: ::std::os::raw::c_ushort = 512;
pub const NS_MAXDNAME: ::std::os::raw::c_ushort = 1025;
pub const NS_MAXMSG: ::std::os::raw::c_ushort = 65535;
pub const NS_MAXCDNAME: ::std::os::raw::c_uchar = 255;
pub const NS_MAXLABEL: ::std::os::raw::c_uchar = 63;
pub const NS_HFIXEDSZ: ::std::os::raw::c_uchar = 12;
pub const NS_QFIXEDSZ: ::std::os::raw::c_uchar = 4;
pub const NS_RRFIXEDSZ: ::std::os::raw::c_uchar = 10;
pub const NS_INT32SZ: ::std::os::raw::c_uchar = 4;
pub const NS_INT16SZ: ::std::os::raw::c_uchar = 2;
pub const NS_INT8SZ: ::std::os::raw::c_uchar = 1;
pub const NS_INADDRSZ: ::std::os::raw::c_uchar = 4;
pub const NS_IN6ADDRSZ: ::std::os::raw::c_uchar = 16;
pub const NS_CMPRSFLGS: ::std::os::raw::c_uchar = 192;
pub const NS_DEFAULTPORT: ::std::os::raw::c_uchar = 53;
pub const NS_TSIG_FUDGE: ::std::os::raw::c_ushort = 300;
pub const NS_TSIG_TCP_COUNT: ::std::os::raw::c_uchar = 100;
pub const NS_TSIG_ERROR_NO_TSIG: ::std::os::raw::c_char = -10;
pub const NS_TSIG_ERROR_NO_SPACE: ::std::os::raw::c_char = -11;
pub const NS_TSIG_ERROR_FORMERR: ::std::os::raw::c_char = -12;
pub const NS_KEY_TYPEMASK: ::std::os::raw::c_ushort = 49152;
pub const NS_KEY_TYPE_AUTH_CONF: ::std::os::raw::c_uchar = 0;
pub const NS_KEY_TYPE_CONF_ONLY: ::std::os::raw::c_ushort = 32768;
pub const NS_KEY_TYPE_AUTH_ONLY: ::std::os::raw::c_ushort = 16384;
pub const NS_KEY_TYPE_NO_KEY: ::std::os::raw::c_ushort = 49152;
pub const NS_KEY_NO_AUTH: ::std::os::raw::c_ushort = 32768;
pub const NS_KEY_NO_CONF: ::std::os::raw::c_ushort = 16384;
pub const NS_KEY_RESERVED2: ::std::os::raw::c_ushort = 8192;
pub const NS_KEY_EXTENDED_FLAGS: ::std::os::raw::c_ushort = 4096;
pub const NS_KEY_RESERVED4: ::std::os::raw::c_ushort = 2048;
pub const NS_KEY_RESERVED5: ::std::os::raw::c_ushort = 1024;
pub const NS_KEY_NAME_TYPE: ::std::os::raw::c_ushort = 768;
pub const NS_KEY_NAME_USER: ::std::os::raw::c_uchar = 0;
pub const NS_KEY_NAME_ENTITY: ::std::os::raw::c_ushort = 512;
pub const NS_KEY_NAME_ZONE: ::std::os::raw::c_ushort = 256;
pub const NS_KEY_NAME_RESERVED: ::std::os::raw::c_ushort = 768;
pub const NS_KEY_RESERVED8: ::std::os::raw::c_uchar = 128;
pub const NS_KEY_RESERVED9: ::std::os::raw::c_uchar = 64;
pub const NS_KEY_RESERVED10: ::std::os::raw::c_uchar = 32;
pub const NS_KEY_RESERVED11: ::std::os::raw::c_uchar = 16;
pub const NS_KEY_SIGNATORYMASK: ::std::os::raw::c_uchar = 15;
pub const NS_KEY_RESERVED_BITMASK: ::std::os::raw::c_ushort = 11504;
pub const NS_KEY_RESERVED_BITMASK2: ::std::os::raw::c_ushort = 65535;
pub const NS_ALG_MD5RSA: ::std::os::raw::c_uchar = 1;
pub const NS_ALG_DH: ::std::os::raw::c_uchar = 2;
pub const NS_ALG_DSA: ::std::os::raw::c_uchar = 3;
pub const NS_ALG_DSS: ::std::os::raw::c_uchar = 3;
pub const NS_ALG_EXPIRE_ONLY: ::std::os::raw::c_uchar = 253;
pub const NS_ALG_PRIVATE_OID: ::std::os::raw::c_uchar = 254;
pub const NS_KEY_PROT_TLS: ::std::os::raw::c_uchar = 1;
pub const NS_KEY_PROT_EMAIL: ::std::os::raw::c_uchar = 2;
pub const NS_KEY_PROT_DNSSEC: ::std::os::raw::c_uchar = 3;
pub const NS_KEY_PROT_IPSEC: ::std::os::raw::c_uchar = 4;
pub const NS_KEY_PROT_ANY: ::std::os::raw::c_uchar = 255;
pub const NS_MD5RSA_MIN_BITS: ::std::os::raw::c_ushort = 512;
pub const NS_MD5RSA_MAX_BITS: ::std::os::raw::c_ushort = 4096;
pub const NS_MD5RSA_MAX_BYTES: ::std::os::raw::c_ushort = 8195;
pub const NS_MD5RSA_MAX_BASE64: ::std::os::raw::c_ushort = 10928;
pub const NS_MD5RSA_MIN_SIZE: ::std::os::raw::c_uchar = 64;
pub const NS_MD5RSA_MAX_SIZE: ::std::os::raw::c_ushort = 512;
pub const NS_DSA_SIG_SIZE: ::std::os::raw::c_uchar = 41;
pub const NS_DSA_MIN_SIZE: ::std::os::raw::c_uchar = 213;
pub const NS_DSA_MAX_BYTES: ::std::os::raw::c_ushort = 405;
pub const NS_SIG_TYPE: ::std::os::raw::c_uchar = 0;
pub const NS_SIG_ALG: ::std::os::raw::c_uchar = 2;
pub const NS_SIG_LABELS: ::std::os::raw::c_uchar = 3;
pub const NS_SIG_OTTL: ::std::os::raw::c_uchar = 4;
pub const NS_SIG_EXPIR: ::std::os::raw::c_uchar = 8;
pub const NS_SIG_SIGNED: ::std::os::raw::c_uchar = 12;
pub const NS_SIG_FOOT: ::std::os::raw::c_uchar = 16;
pub const NS_SIG_SIGNER: ::std::os::raw::c_uchar = 18;
pub const NS_NXT_BITS: ::std::os::raw::c_uchar = 8;
pub const NS_NXT_MAX: ::std::os::raw::c_uchar = 127;
pub const NS_OPT_DNSSEC_OK: ::std::os::raw::c_ushort = 32768;
pub const NS_OPT_NSID: ::std::os::raw::c_uchar = 3;
pub const __BIND: ::std::os::raw::c_uint = 19950621;
pub const PACKETSZ: ::std::os::raw::c_ushort = 512;
pub const MAXDNAME: ::std::os::raw::c_ushort = 1025;
pub const MAXCDNAME: ::std::os::raw::c_uchar = 255;
pub const MAXLABEL: ::std::os::raw::c_uchar = 63;
pub const HFIXEDSZ: ::std::os::raw::c_uchar = 12;
pub const QFIXEDSZ: ::std::os::raw::c_uchar = 4;
pub const RRFIXEDSZ: ::std::os::raw::c_uchar = 10;
pub const INT32SZ: ::std::os::raw::c_uchar = 4;
pub const INT16SZ: ::std::os::raw::c_uchar = 2;
pub const INT8SZ: ::std::os::raw::c_uchar = 1;
pub const INADDRSZ: ::std::os::raw::c_uchar = 4;
pub const IN6ADDRSZ: ::std::os::raw::c_uchar = 16;
pub const INDIR_MASK: ::std::os::raw::c_uchar = 192;
pub const NAMESERVER_PORT: ::std::os::raw::c_uchar = 53;
pub const MAXNS: ::std::os::raw::c_uchar = 3;
pub const MAXDFLSRCH: ::std::os::raw::c_uchar = 3;
pub const MAXDNSRCH: ::std::os::raw::c_uchar = 6;
pub const LOCALDOMAINPARTS: ::std::os::raw::c_uchar = 2;
pub const RES_TIMEOUT: ::std::os::raw::c_uchar = 5;
pub const MAXRESOLVSORT: ::std::os::raw::c_uchar = 10;
pub const RES_MAXNDOTS: ::std::os::raw::c_uchar = 15;
pub const RES_MAXRETRANS: ::std::os::raw::c_uchar = 30;
pub const RES_MAXRETRY: ::std::os::raw::c_uchar = 5;
pub const RES_DFLRETRY: ::std::os::raw::c_uchar = 2;
pub const RES_MAXTIME: ::std::os::raw::c_ushort = 65535;
pub const __RES: ::std::os::raw::c_uint = 19991006;
pub const RES_F_VC: ::std::os::raw::c_uchar = 1;
pub const RES_F_CONN: ::std::os::raw::c_uchar = 2;
pub const RES_F_EDNS0ERR: ::std::os::raw::c_uchar = 4;
pub const RES_EXHAUSTIVE: ::std::os::raw::c_uchar = 1;
pub const RES_INIT: ::std::os::raw::c_ulong = 1;
pub const RES_DEBUG: ::std::os::raw::c_ulong = 2;
pub const RES_AAONLY: ::std::os::raw::c_ulong = 4;
pub const RES_USEVC: ::std::os::raw::c_ulong = 8;
pub const RES_PRIMARY: ::std::os::raw::c_ulong = 16;
pub const RES_IGNTC: ::std::os::raw::c_ulong = 32;
pub const RES_RECURSE: ::std::os::raw::c_ulong = 64;
pub const RES_DEFNAMES: ::std::os::raw::c_ulong = 128;
pub const RES_STAYOPEN: ::std::os::raw::c_ulong = 256;
pub const RES_DNSRCH: ::std::os::raw::c_ulong = 512;
pub const RES_INSECURE1: ::std::os::raw::c_ulong = 1024;
pub const RES_INSECURE2: ::std::os::raw::c_ulong = 2048;
pub const RES_NOALIASES: ::std::os::raw::c_ulong = 4096;
pub const RES_USE_INET6: ::std::os::raw::c_ulong = 8192;
pub const RES_ROTATE: ::std::os::raw::c_ulong = 16384;
pub const RES_NOCHECKNAME: ::std::os::raw::c_ulong = 32768;
pub const RES_KEEPTSIG: ::std::os::raw::c_ulong = 65536;
pub const RES_BLAST: ::std::os::raw::c_ulong = 131072;
pub const RES_USEBSTRING: ::std::os::raw::c_ulong = 262144;
pub const RES_NOIP6DOTINT: ::std::os::raw::c_ulong = 524288;
pub const RES_USE_EDNS0: ::std::os::raw::c_ulong = 1048576;
pub const RES_SNGLKUP: ::std::os::raw::c_ulong = 2097152;
pub const RES_SNGLKUPREOP: ::std::os::raw::c_ulong = 4194304;
pub const RES_USE_DNSSEC: ::std::os::raw::c_ulong = 8388608;
pub const RES_NOTLDQUERY: ::std::os::raw::c_ulong = 16777216;
pub const RES_DEFAULT: ::std::os::raw::c_ulong = 524992;
pub const RES_PRF_STATS: ::std::os::raw::c_uchar = 1;
pub const RES_PRF_UPDATE: ::std::os::raw::c_uchar = 2;
pub const RES_PRF_CLASS: ::std::os::raw::c_uchar = 4;
pub const RES_PRF_CMD: ::std::os::raw::c_uchar = 8;
pub const RES_PRF_QUES: ::std::os::raw::c_uchar = 16;
pub const RES_PRF_ANS: ::std::os::raw::c_uchar = 32;
pub const RES_PRF_AUTH: ::std::os::raw::c_uchar = 64;
pub const RES_PRF_ADD: ::std::os::raw::c_uchar = 128;
pub const RES_PRF_HEAD1: ::std::os::raw::c_ushort = 256;
pub const RES_PRF_HEAD2: ::std::os::raw::c_ushort = 512;
pub const RES_PRF_TTLID: ::std::os::raw::c_ushort = 1024;
pub const RES_PRF_HEADX: ::std::os::raw::c_ushort = 2048;
pub const RES_PRF_QUERY: ::std::os::raw::c_ushort = 4096;
pub const RES_PRF_REPLY: ::std::os::raw::c_ushort = 8192;
pub const RES_PRF_INIT: ::std::os::raw::c_ushort = 16384;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = usize;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for iovec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
impl ::std::default::Default for sockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::std::os::raw::c_ulong,
    pub __ss_padding: [::std::os::raw::c_char; 112usize],
}
impl ::std::clone::Clone for sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for sockaddr_storage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed3 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
impl ::std::default::Default for msghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: [::std::os::raw::c_uchar; 0usize],
}
impl ::std::default::Default for cmsghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed4 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
impl ::std::default::Default for linger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
impl ::std::default::Default for osockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed5 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for in_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for ip_opts {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for ip_opts {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
impl ::std::default::Default for ip_mreqn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
impl ::std::default::Default for in_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed7 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}
pub type in_port_t = uint16_t;
pub const IPPORT_BIFFUDP: Enum_Unnamed8 = Enum_Unnamed8::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: Enum_Unnamed8 = Enum_Unnamed8::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: Enum_Unnamed8 = Enum_Unnamed8::IPPORT_EFSSERVER;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed8 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in6_addr {
    pub __in6_u: Union_Unnamed9,
}
impl ::std::default::Default for in6_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::default::Default for sockaddr_in {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for sockaddr_in6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
impl ::std::default::Default for ip_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
impl ::std::default::Default for ip_mreq_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
impl ::std::default::Default for ipv6_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_req {
    pub gr_interface: uint32_t,
    pub gr_group: sockaddr_storage,
}
impl ::std::clone::Clone for group_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
impl ::std::clone::Clone for group_source_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_source_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [in_addr; 1usize],
}
impl ::std::default::Default for ip_msfilter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [sockaddr_storage; 1usize],
}
impl ::std::clone::Clone for group_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigval_t = sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: Union_Unnamed10,
}
impl ::std::default::Default for siginfo_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 14usize],
}
impl Union_Unnamed10 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 28usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed11 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed12 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed13 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed15 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed11 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed12 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed13 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed14 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed15 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: Struct_Unnamed16,
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed16 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed17 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed18 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum Enum_Unnamed19 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed20 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed21 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed22 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed23 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed24 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed25 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: Union_Unnamed26,
}
impl ::std::default::Default for sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed26 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 12usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed27 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed27 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigevent_t = sigevent;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed28 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigaction {
    pub __sigaction_handler: Union_Unnamed29,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed29 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed29 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2: *mut siginfo_t,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
impl ::std::default::Default for _fpx_sw_bytes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for _fpreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::default::Default for _fpxreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for _xmmreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for _fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub __reserved1: [__uint64_t; 8usize],
}
impl sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut _fpstate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for sigcontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
impl ::std::default::Default for _xsave_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
impl ::std::clone::Clone for _ymmh_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _ymmh_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
impl ::std::clone::Clone for _xstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _xstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl ::std::default::Default for sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed30 { SS_ONSTACK = 1, SS_DISABLE = 2, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
impl ::std::default::Default for sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::default::Default for _libc_fpxreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for _libc_xmmreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for _libc_fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
impl ::std::default::Default for mcontext_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
impl ::std::default::Default for ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = ucontext;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed31,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed31 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed31 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type fpos_t = _G_fpos_t;
pub const ns_s_zn: __ns_sect = __ns_sect::ns_s_qd;
pub const ns_s_pr: __ns_sect = __ns_sect::ns_s_an;
pub const ns_s_ud: __ns_sect = __ns_sect::ns_s_ns;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_sect {
    ns_s_qd = 0,
    ns_s_an = 1,
    ns_s_ns = 2,
    ns_s_ar = 3,
    ns_s_max = 4,
}
pub type ns_sect = __ns_sect;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __ns_msg {
    pub _msg: *const u_char,
    pub _eom: *const u_char,
    pub _id: u_int16_t,
    pub _flags: u_int16_t,
    pub _counts: [u_int16_t; 4usize],
    pub _sections: [*const u_char; 4usize],
    pub _sect: ns_sect,
    pub _rrnum: ::std::os::raw::c_int,
    pub _msg_ptr: *const u_char,
}
impl ::std::default::Default for __ns_msg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ns_msg = __ns_msg;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _ns_flagdata {
    pub mask: ::std::os::raw::c_int,
    pub shift: ::std::os::raw::c_int,
}
impl ::std::default::Default for _ns_flagdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __ns_rr {
    pub name: [::std::os::raw::c_char; 1025usize],
    pub type_: u_int16_t,
    pub rr_class: u_int16_t,
    pub ttl: u_int32_t,
    pub rdlength: u_int16_t,
    pub rdata: *const u_char,
}
impl ::std::clone::Clone for __ns_rr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __ns_rr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ns_rr = __ns_rr;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_flag {
    ns_f_qr = 0,
    ns_f_opcode = 1,
    ns_f_aa = 2,
    ns_f_tc = 3,
    ns_f_rd = 4,
    ns_f_ra = 5,
    ns_f_z = 6,
    ns_f_ad = 7,
    ns_f_cd = 8,
    ns_f_rcode = 9,
    ns_f_max = 10,
}
pub type ns_flag = __ns_flag;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_opcode {
    ns_o_query = 0,
    ns_o_iquery = 1,
    ns_o_status = 2,
    ns_o_notify = 4,
    ns_o_update = 5,
    ns_o_max = 6,
}
pub type ns_opcode = __ns_opcode;
pub const ns_r_badsig: __ns_rcode = __ns_rcode::ns_r_badvers;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_rcode {
    ns_r_noerror = 0,
    ns_r_formerr = 1,
    ns_r_servfail = 2,
    ns_r_nxdomain = 3,
    ns_r_notimpl = 4,
    ns_r_refused = 5,
    ns_r_yxdomain = 6,
    ns_r_yxrrset = 7,
    ns_r_nxrrset = 8,
    ns_r_notauth = 9,
    ns_r_notzone = 10,
    ns_r_max = 11,
    ns_r_badvers = 16,
    ns_r_badkey = 17,
    ns_r_badtime = 18,
}
pub type ns_rcode = __ns_rcode;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_update_operation {
    ns_uop_delete = 0,
    ns_uop_add = 1,
    ns_uop_max = 2,
}
pub type ns_update_operation = __ns_update_operation;
#[repr(C)]
#[derive(Copy)]
pub struct ns_tsig_key {
    pub name: [::std::os::raw::c_char; 1025usize],
    pub alg: [::std::os::raw::c_char; 1025usize],
    pub data: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for ns_tsig_key {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for ns_tsig_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum dst_key { }
#[repr(C)]
#[derive(Copy)]
pub struct ns_tcp_tsig_state {
    pub counter: ::std::os::raw::c_int,
    pub key: *mut dst_key,
    pub ctx: *mut ::std::os::raw::c_void,
    pub sig: [::std::os::raw::c_uchar; 512usize],
    pub siglen: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for ns_tcp_tsig_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for ns_tcp_tsig_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_type {
    ns_t_invalid = 0,
    ns_t_a = 1,
    ns_t_ns = 2,
    ns_t_md = 3,
    ns_t_mf = 4,
    ns_t_cname = 5,
    ns_t_soa = 6,
    ns_t_mb = 7,
    ns_t_mg = 8,
    ns_t_mr = 9,
    ns_t_null = 10,
    ns_t_wks = 11,
    ns_t_ptr = 12,
    ns_t_hinfo = 13,
    ns_t_minfo = 14,
    ns_t_mx = 15,
    ns_t_txt = 16,
    ns_t_rp = 17,
    ns_t_afsdb = 18,
    ns_t_x25 = 19,
    ns_t_isdn = 20,
    ns_t_rt = 21,
    ns_t_nsap = 22,
    ns_t_nsap_ptr = 23,
    ns_t_sig = 24,
    ns_t_key = 25,
    ns_t_px = 26,
    ns_t_gpos = 27,
    ns_t_aaaa = 28,
    ns_t_loc = 29,
    ns_t_nxt = 30,
    ns_t_eid = 31,
    ns_t_nimloc = 32,
    ns_t_srv = 33,
    ns_t_atma = 34,
    ns_t_naptr = 35,
    ns_t_kx = 36,
    ns_t_cert = 37,
    ns_t_a6 = 38,
    ns_t_dname = 39,
    ns_t_sink = 40,
    ns_t_opt = 41,
    ns_t_apl = 42,
    ns_t_tkey = 249,
    ns_t_tsig = 250,
    ns_t_ixfr = 251,
    ns_t_axfr = 252,
    ns_t_mailb = 253,
    ns_t_maila = 254,
    ns_t_any = 255,
    ns_t_zxfr = 256,
    ns_t_max = 65536,
}
pub type ns_type = __ns_type;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_class {
    ns_c_invalid = 0,
    ns_c_in = 1,
    ns_c_2 = 2,
    ns_c_chaos = 3,
    ns_c_hs = 4,
    ns_c_none = 254,
    ns_c_any = 255,
    ns_c_max = 65536,
}
pub type ns_class = __ns_class;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_key_types {
    ns_kt_rsa = 1,
    ns_kt_dh = 2,
    ns_kt_dsa = 3,
    ns_kt_private = 254,
}
pub type ns_key_types = __ns_key_types;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __ns_cert_types {
    cert_t_pkix = 1,
    cert_t_spki = 2,
    cert_t_pgp = 3,
    cert_t_url = 253,
    cert_t_oid = 254,
}
pub type ns_cert_types = __ns_cert_types;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HEADER {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for HEADER {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum res_sendhookact {
    res_goahead = 0,
    res_nextns = 1,
    res_modified = 2,
    res_done = 3,
    res_error = 4,
}
pub type res_send_qhook =
    ::std::option::Option<unsafe extern "C" fn(__ns: *const *mut sockaddr_in,
                                               __query: *mut *const u_char,
                                               __querylen:
                                                   *mut ::std::os::raw::c_int,
                                               __ans: *mut u_char,
                                               __anssiz:
                                                   ::std::os::raw::c_int,
                                               __resplen:
                                                   *mut ::std::os::raw::c_int)
                              -> res_sendhookact>;
pub type res_send_rhook =
    ::std::option::Option<unsafe extern "C" fn(__ns: *const sockaddr_in,
                                               __query: *const u_char,
                                               __querylen:
                                                   ::std::os::raw::c_int,
                                               __ans: *mut u_char,
                                               __anssiz:
                                                   ::std::os::raw::c_int,
                                               __resplen:
                                                   *mut ::std::os::raw::c_int)
                              -> res_sendhookact>;
#[repr(C)]
#[derive(Copy)]
pub struct __res_state {
    pub retrans: ::std::os::raw::c_int,
    pub retry: ::std::os::raw::c_int,
    pub options: u_long,
    pub nscount: ::std::os::raw::c_int,
    pub nsaddr_list: [sockaddr_in; 3usize],
    pub id: u_short,
    pub dnsrch: [*mut ::std::os::raw::c_char; 7usize],
    pub defdname: [::std::os::raw::c_char; 256usize],
    pub pfcode: u_long,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub sort_list: [Struct_Unnamed32; 10usize],
    pub qhook: res_send_qhook,
    pub rhook: res_send_rhook,
    pub res_h_errno: ::std::os::raw::c_int,
    pub _vcsock: ::std::os::raw::c_int,
    pub _flags: u_int,
    pub _u: Union_Unnamed33,
}
impl ::std::clone::Clone for __res_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __res_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed32 {
    pub addr: in_addr,
    pub mask: u_int32_t,
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed33 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed33 {
    pub unsafe fn pad(&mut self) -> *mut [::std::os::raw::c_char; 52usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _ext(&mut self) -> *mut Struct_Unnamed34 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed34 {
    pub nscount: u_int16_t,
    pub nsmap: [u_int16_t; 3usize],
    pub nssocks: [::std::os::raw::c_int; 3usize],
    pub nscount6: u_int16_t,
    pub nsinit: u_int16_t,
    pub nsaddrs: [*mut sockaddr_in6; 3usize],
    pub _initstamp: [::std::os::raw::c_uint; 2usize],
}
impl ::std::default::Default for Struct_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type res_state = *mut __res_state;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct res_sym {
    pub number: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub humanname: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for res_sym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static in6addr_any: in6_addr;
    pub static in6addr_loopback: in6_addr;
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut _ns_flagdata: [_ns_flagdata; 0usize];
}
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                 __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr)
     -> *mut cmsghdr;
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getsockname(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn connect(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                   __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getpeername(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: size_t,
                  __flags: ::std::os::raw::c_int, __addr: *const sockaddr,
                  __addr_len: socklen_t) -> ssize_t;
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: size_t,
                    __flags: ::std::os::raw::c_int, __addr: *mut sockaddr,
                    __addr_len: *mut socklen_t) -> ssize_t;
    pub fn sendmsg(__fd: ::std::os::raw::c_int, __message: *const msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::std::os::raw::c_int,
                        __sock_in: *mut sockaddr_in) -> ::std::os::raw::c_int;
    pub fn bindresvport6(__sockfd: ::std::os::raw::c_int,
                         __sock_in: *mut sockaddr_in6)
     -> ::std::os::raw::c_int;
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t) -> __sighandler_t;
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn psignal(__sig: ::std::os::raw::c_int,
                   __s: *const ::std::os::raw::c_char);
    pub fn psiginfo(__pinfo: *const siginfo_t,
                    __s: *const ::std::os::raw::c_char);
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn siggetmask() -> ::std::os::raw::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigismember(__set: *const sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigprocmask(__how: ::std::os::raw::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaction(__sig: ::std::os::raw::c_int, __act: *const sigaction,
                     __oact: *mut sigaction) -> ::std::os::raw::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::std::os::raw::c_int;
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const timespec) -> ::std::os::raw::c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: ::std::os::raw::c_int,
                    __val: sigval) -> ::std::os::raw::c_int;
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack)
     -> ::std::os::raw::c_int;
    pub fn sigaltstack(__ss: *const sigaltstack, __oss: *mut sigaltstack)
     -> ::std::os::raw::c_int;
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn ns_msg_getflag(arg1: ns_msg, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ns_get16(arg1: *const u_char) -> u_int;
    pub fn ns_get32(arg1: *const u_char) -> u_long;
    pub fn ns_put16(arg1: u_int, arg2: *mut u_char);
    pub fn ns_put32(arg1: u_long, arg2: *mut u_char);
    pub fn ns_initparse(arg1: *const u_char, arg2: ::std::os::raw::c_int,
                        arg3: *mut ns_msg) -> ::std::os::raw::c_int;
    pub fn ns_skiprr(arg1: *const u_char, arg2: *const u_char, arg3: ns_sect,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ns_parserr(arg1: *mut ns_msg, arg2: ns_sect,
                      arg3: ::std::os::raw::c_int, arg4: *mut ns_rr)
     -> ::std::os::raw::c_int;
    pub fn ns_sprintrr(arg1: *const ns_msg, arg2: *const ns_rr,
                       arg3: *const ::std::os::raw::c_char,
                       arg4: *const ::std::os::raw::c_char,
                       arg5: *mut ::std::os::raw::c_char, arg6: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_sprintrrf(arg1: *const u_char, arg2: size_t,
                        arg3: *const ::std::os::raw::c_char, arg4: ns_class,
                        arg5: ns_type, arg6: u_long, arg7: *const u_char,
                        arg8: size_t, arg9: *const ::std::os::raw::c_char,
                        arg10: *const ::std::os::raw::c_char,
                        arg11: *mut ::std::os::raw::c_char, arg12: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_format_ttl(arg1: u_long, arg2: *mut ::std::os::raw::c_char,
                         arg3: size_t) -> ::std::os::raw::c_int;
    pub fn ns_parse_ttl(arg1: *const ::std::os::raw::c_char,
                        arg2: *mut u_long) -> ::std::os::raw::c_int;
    pub fn ns_datetosecs(arg1: *const ::std::os::raw::c_char,
                         arg2: *mut ::std::os::raw::c_int) -> u_int32_t;
    pub fn ns_name_ntol(arg1: *const u_char, arg2: *mut u_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_name_ntop(arg1: *const u_char,
                        arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_name_pton(arg1: *const ::std::os::raw::c_char,
                        arg2: *mut u_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_name_unpack(arg1: *const u_char, arg2: *const u_char,
                          arg3: *const u_char, arg4: *mut u_char,
                          arg5: size_t) -> ::std::os::raw::c_int;
    pub fn ns_name_pack(arg1: *const u_char, arg2: *mut u_char,
                        arg3: ::std::os::raw::c_int, arg4: *mut *const u_char,
                        arg5: *mut *const u_char) -> ::std::os::raw::c_int;
    pub fn ns_name_uncompress(arg1: *const u_char, arg2: *const u_char,
                              arg3: *const u_char,
                              arg4: *mut ::std::os::raw::c_char, arg5: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_name_compress(arg1: *const ::std::os::raw::c_char,
                            arg2: *mut u_char, arg3: size_t,
                            arg4: *mut *const u_char,
                            arg5: *mut *const u_char)
     -> ::std::os::raw::c_int;
    pub fn ns_name_skip(arg1: *mut *const u_char, arg2: *const u_char)
     -> ::std::os::raw::c_int;
    pub fn ns_name_rollback(arg1: *const u_char, arg2: *mut *const u_char,
                            arg3: *mut *const u_char);
    pub fn ns_sign(arg1: *mut u_char, arg2: *mut ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                   arg5: *mut ::std::os::raw::c_void, arg6: *const u_char,
                   arg7: ::std::os::raw::c_int, arg8: *mut u_char,
                   arg9: *mut ::std::os::raw::c_int, arg10: time_t)
     -> ::std::os::raw::c_int;
    pub fn ns_sign2(arg1: *mut u_char, arg2: *mut ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                    arg5: *mut ::std::os::raw::c_void, arg6: *const u_char,
                    arg7: ::std::os::raw::c_int, arg8: *mut u_char,
                    arg9: *mut ::std::os::raw::c_int, arg10: time_t,
                    arg11: *mut *mut u_char, arg12: *mut *mut u_char)
     -> ::std::os::raw::c_int;
    pub fn ns_sign_tcp(arg1: *mut u_char, arg2: *mut ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int,
                       arg5: *mut ns_tcp_tsig_state,
                       arg6: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ns_sign_tcp2(arg1: *mut u_char, arg2: *mut ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_int,
                        arg5: *mut ns_tcp_tsig_state,
                        arg6: ::std::os::raw::c_int, arg7: *mut *mut u_char,
                        arg8: *mut *mut u_char) -> ::std::os::raw::c_int;
    pub fn ns_sign_tcp_init(arg1: *mut ::std::os::raw::c_void,
                            arg2: *const u_char, arg3: ::std::os::raw::c_int,
                            arg4: *mut ns_tcp_tsig_state)
     -> ::std::os::raw::c_int;
    pub fn ns_find_tsig(arg1: *mut u_char, arg2: *mut u_char) -> *mut u_char;
    pub fn ns_verify(arg1: *mut u_char, arg2: *mut ::std::os::raw::c_int,
                     arg3: *mut ::std::os::raw::c_void, arg4: *const u_char,
                     arg5: ::std::os::raw::c_int, arg6: *mut u_char,
                     arg7: *mut ::std::os::raw::c_int, arg8: *mut time_t,
                     arg9: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ns_verify_tcp(arg1: *mut u_char, arg2: *mut ::std::os::raw::c_int,
                         arg3: *mut ns_tcp_tsig_state,
                         arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ns_verify_tcp_init(arg1: *mut ::std::os::raw::c_void,
                              arg2: *const u_char,
                              arg3: ::std::os::raw::c_int,
                              arg4: *mut ns_tcp_tsig_state)
     -> ::std::os::raw::c_int;
    pub fn ns_samedomain(arg1: *const ::std::os::raw::c_char,
                         arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ns_subdomain(arg1: *const ::std::os::raw::c_char,
                        arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ns_makecanon(arg1: *const ::std::os::raw::c_char,
                        arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn ns_samename(arg1: *const ::std::os::raw::c_char,
                       arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn __res_state() -> *mut __res_state;
    pub fn __fp_nquery(arg1: *const u_char, arg2: ::std::os::raw::c_int,
                       arg3: *mut FILE);
    pub fn __fp_query(arg1: *const u_char, arg2: *mut FILE);
    pub fn __hostalias(arg1: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn __p_query(arg1: *const u_char);
    pub fn __res_close();
    pub fn __res_init() -> ::std::os::raw::c_int;
    pub fn __res_isourserver(arg1: *const sockaddr_in)
     -> ::std::os::raw::c_int;
    pub fn __res_mkquery(arg1: ::std::os::raw::c_int,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         arg4: ::std::os::raw::c_int, arg5: *const u_char,
                         arg6: ::std::os::raw::c_int, arg7: *const u_char,
                         arg8: *mut u_char, arg9: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __res_query(arg1: *const ::std::os::raw::c_char,
                       arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int, arg4: *mut u_char,
                       arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __res_querydomain(arg1: *const ::std::os::raw::c_char,
                             arg2: *const ::std::os::raw::c_char,
                             arg3: ::std::os::raw::c_int,
                             arg4: ::std::os::raw::c_int, arg5: *mut u_char,
                             arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __res_search(arg1: *const ::std::os::raw::c_char,
                        arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *mut u_char,
                        arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __res_send(arg1: *const u_char, arg2: ::std::os::raw::c_int,
                      arg3: *mut u_char, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __res_hnok(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn __res_ownok(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn __res_mailok(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn __res_dnok(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn __sym_ston(arg1: *const res_sym,
                      arg2: *const ::std::os::raw::c_char,
                      arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sym_ntos(arg1: *const res_sym, arg2: ::std::os::raw::c_int,
                      arg3: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn __sym_ntop(arg1: *const res_sym, arg2: ::std::os::raw::c_int,
                      arg3: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn __b64_ntop(arg1: *const u_char, arg2: size_t,
                      arg3: *mut ::std::os::raw::c_char, arg4: size_t)
     -> ::std::os::raw::c_int;
    pub fn __b64_pton(arg1: *const ::std::os::raw::c_char, arg2: *mut u_char,
                      arg3: size_t) -> ::std::os::raw::c_int;
    pub fn __loc_aton(__ascii: *const ::std::os::raw::c_char,
                      __binary: *mut u_char) -> ::std::os::raw::c_int;
    pub fn __loc_ntoa(__binary: *const u_char,
                      __ascii: *mut ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn __dn_skipname(arg1: *const u_char, arg2: *const u_char)
     -> ::std::os::raw::c_int;
    pub fn __putlong(arg1: u_int32_t, arg2: *mut u_char);
    pub fn __putshort(arg1: u_int16_t, arg2: *mut u_char);
    pub fn __p_class(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn __p_time(arg1: u_int32_t) -> *const ::std::os::raw::c_char;
    pub fn __p_type(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn __p_rcode(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn __p_cdnname(arg1: *const u_char, arg2: *const u_char,
                       arg3: ::std::os::raw::c_int, arg4: *mut FILE)
     -> *const u_char;
    pub fn __p_cdname(arg1: *const u_char, arg2: *const u_char,
                      arg3: *mut FILE) -> *const u_char;
    pub fn __p_fqnname(__cp: *const u_char, __msg: *const u_char,
                       arg1: ::std::os::raw::c_int,
                       arg2: *mut ::std::os::raw::c_char,
                       arg3: ::std::os::raw::c_int) -> *const u_char;
    pub fn __p_fqname(arg1: *const u_char, arg2: *const u_char,
                      arg3: *mut FILE) -> *const u_char;
    pub fn __p_option(__option: u_long) -> *const ::std::os::raw::c_char;
    pub fn __p_secstodate(arg1: u_long) -> *mut ::std::os::raw::c_char;
    pub fn __dn_count_labels(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn __dn_comp(arg1: *const ::std::os::raw::c_char, arg2: *mut u_char,
                     arg3: ::std::os::raw::c_int, arg4: *mut *mut u_char,
                     arg5: *mut *mut u_char) -> ::std::os::raw::c_int;
    pub fn __dn_expand(arg1: *const u_char, arg2: *const u_char,
                       arg3: *const u_char, arg4: *mut ::std::os::raw::c_char,
                       arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __res_randomid() -> u_int;
    pub fn __res_nameinquery(arg1: *const ::std::os::raw::c_char,
                             arg2: ::std::os::raw::c_int,
                             arg3: ::std::os::raw::c_int, arg4: *const u_char,
                             arg5: *const u_char) -> ::std::os::raw::c_int;
    pub fn __res_queriesmatch(arg1: *const u_char, arg2: *const u_char,
                              arg3: *const u_char, arg4: *const u_char)
     -> ::std::os::raw::c_int;
    pub fn __p_section(__section: ::std::os::raw::c_int,
                       __opcode: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn __res_ninit(arg1: res_state) -> ::std::os::raw::c_int;
    pub fn __res_nisourserver(arg1: res_state, arg2: *const sockaddr_in)
     -> ::std::os::raw::c_int;
    pub fn __fp_resstat(arg1: res_state, arg2: *mut FILE);
    pub fn __res_npquery(arg1: res_state, arg2: *const u_char,
                         arg3: ::std::os::raw::c_int, arg4: *mut FILE);
    pub fn __res_hostalias(arg1: res_state,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: *mut ::std::os::raw::c_char, arg4: size_t)
     -> *const ::std::os::raw::c_char;
    pub fn __res_nquery(arg1: res_state, arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_int, arg5: *mut u_char,
                        arg6: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __res_nsearch(arg1: res_state, arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         arg4: ::std::os::raw::c_int, arg5: *mut u_char,
                         arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __res_nquerydomain(arg1: res_state,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: *const ::std::os::raw::c_char,
                              arg4: ::std::os::raw::c_int,
                              arg5: ::std::os::raw::c_int, arg6: *mut u_char,
                              arg7: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __res_nmkquery(arg1: res_state, arg2: ::std::os::raw::c_int,
                          arg3: *const ::std::os::raw::c_char,
                          arg4: ::std::os::raw::c_int,
                          arg5: ::std::os::raw::c_int, arg6: *const u_char,
                          arg7: ::std::os::raw::c_int, arg8: *const u_char,
                          arg9: *mut u_char, arg10: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __res_nsend(arg1: res_state, arg2: *const u_char,
                       arg3: ::std::os::raw::c_int, arg4: *mut u_char,
                       arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __res_nclose(arg1: res_state);
}
